/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id "org.nosphere.apache.rat" version "0.3.0"
  id "com.diffplug.gradle.spotless" version "3.0.0"
  id "de.undercouch.download" version "3.1.2"
}

def downloadFile = "apache-geode-${geodeVersion}.tar.gz"
def installFile = "$buildDir/$downloadFile"
def installDir = "$buildDir/apache-geode-${geodeVersion}"

task downloadGeode {
  inputs.property 'geodeVersion', geodeVersion
  outputs.file installFile
  outputs.file "${installFile}.sha256"

  doLast {
    download {
      src([
        "https://www.apache.org/dyn/closer.cgi?action=download&filename=geode/$geodeVersion/$downloadFile",
        "https://www.apache.org/dist/geode/$geodeVersion/${downloadFile}.sha256"
      ])
      dest buildDir
    }
  }
}

task verifyGeode(type: de.undercouch.gradle.tasks.download.Verify, dependsOn: downloadGeode) {
  src installFile
  algorithm "SHA-256"
  doFirst { 
    checksum file("${installFile}.sha256").text.split(' ')[0]
  }
}

task installGeode(type: Copy, dependsOn: verifyGeode) {
  inputs.file installFile
  outputs.dir installDir

  from tarTree(resources.gzip(installFile))
  into buildDir
}

subprojects {
    apply plugin:'java'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.apache.geode:geode-core:$geodeVersion"
        compile "org.apache.commons:commons-exec:$commonsExecVersion"
        runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"

        testCompile "com.jayway.awaitility:awaitility:$awaitilityVersion"
        testCompile project(":utils")
        testCompile "junit:junit:$junitVersion"
        testCompile "org.mockito:mockito-core:$mockitocoreVersion"
    }

    task run(type: JavaExec) {
        description = 'Run example'
        def mainClass = rootProject.hasProperty('main') ? "${rootProject.getProperty('main')}" : 'Main'
        main = "org.apache.geode.examples.${project.name}.$mainClass"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
        systemProperties = System.getProperties()
        if (rootProject.hasProperty('args')) {
            args = ["${rootProject.getProperty('args')}"]
        }
    }

    test.dependsOn installGeode
    test {
	environment 'GEODE_HOME': "$rootProject.buildDir/apache-geode-$geodeVersion"
    }

    apply plugin: "com.diffplug.gradle.spotless"
    spotless {
	lineEndings = 'unix';
	java {
	    target project.fileTree(project.projectDir) {
		include '**/*.java'
	    }
	    eclipseFormatFile "${rootProject.projectDir}/etc/eclipse-java-google-style.xml"
	}
    }
}

apply from: "gradle/rat.gradle"
apply from: "gradle/release.gradle"
